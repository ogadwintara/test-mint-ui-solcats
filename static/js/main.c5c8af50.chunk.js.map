{"version":3,"sources":["pages/CandyMachine/helpers.js","pages/CandyMachine/connection.js","CandyMachineContext.js","pages/CandyMachine/index.js","assets/imgs/stamp.png","assets/imgs/hellcats.png","pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["candyMachineProgram","web3","PublicKey","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","anchor","getAtaForMint","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","mint","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","gatekeeperNetwork","Buffer","from","getNetworkToken","wallet","shortenAddress","address","chars","slice","sendTransactions","connection","instructionSet","signersSet","sequenceType","commitment","successCallback","txid","ind","failCallback","block","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","length","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","console","log","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","Promise","all","number","txs","getUnixTs","Date","getTime","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","createContext","useCandyMachine","useContext","CandyMachineProvider","children","useState","candyMachine","setCandyMachine","walletAddress","setWalletAddress","Provider","opts","preflightCommitment","CandyMachine","recaptchaRef","React","createRef","count","setCount","isLoading","setLoading","clickMint","preventDefault","current","getValue","window","alert","mintToken","getProvider","Connection","process","solana","getCandyMachineState","provider","Program","fetchIdl","idl","program","account","fetch","price","data","toNumber","LAMPORTS_PER_SOL","itemsAvailable","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","presale","whitelistMintSettings","goLiveDateTimeString","toGMTString","id","state","isSoldOut","isActive","endSettings","endSettingType","date","isPresale","treasury","tokenMint","gatekeeper","hiddenSettings","getCandyMachineCreator","candyMachineID","getMetadata","getMasterEdition","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","c","signersMatrix","instructionsMatrix","index","Keypair","generate","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","expireOnUse","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","undefined","t","useEffect","onSubmit","className","ref","sitekey","type","onChange","target","required","disabled","height","color","Home","percent","setPercent","connectWallet","connect","response","isPhantom","onlyIfTrusted","Math","floor","src","logo","alt","onClick","hellcat","input","textStyle","fill","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5c8af50.chunk.js","sourcesContent":["import { web3 } from '@project-serum/anchor';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n\tLAMPORTS_PER_SOL,\r\n\tSYSVAR_RENT_PUBKEY,\r\n\tTransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\n// CLI Properties Given to us\r\nconst candyMachineProgram = new web3.PublicKey(\r\n\t'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\r\n\t'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\r\n);\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\r\n\t'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\r\n);\r\n\r\nconst CIVIC = new anchor.web3.PublicKey(\r\n\t'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nconst toDate = (value) => {\r\n\tif (!value) {\r\n\t\treturn;\r\n\t}\r\n\r\n\treturn new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n\tstyle: 'decimal',\r\n\tminimumFractionDigits: 2,\r\n\tmaximumFractionDigits: 2,\r\n});\r\n\r\nconst formatNumber = {\r\n\tformat: (val) => {\r\n\t\tif (!val) {\r\n\t\t\treturn '--';\r\n\t\t}\r\n\r\n\t\treturn numberFormater.format(val);\r\n\t},\r\n\tasNumber: (val) => {\r\n\t\tif (!val) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn val.toNumber() / LAMPORTS_PER_SOL;\r\n\t},\r\n};\r\n\r\nconst getAtaForMint = async (mint, buyer) => {\r\n\treturn await anchor.web3.PublicKey.findProgramAddress(\r\n\t\t[buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n\t\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n\t);\r\n};\r\n\r\nconst getNetworkExpire = async (gatekeeperNetwork) => {\r\n\treturn await anchor.web3.PublicKey.findProgramAddress(\r\n\t\t[gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n\t\tCIVIC,\r\n\t);\r\n};\r\n\r\nconst getNetworkToken = async (wallet, gatekeeperNetwork) => {\r\n\treturn await anchor.web3.PublicKey.findProgramAddress(\r\n\t\t[\r\n\t\t\twallet.toBuffer(),\r\n\t\t\tBuffer.from('gateway'),\r\n\t\t\tBuffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n\t\t\tgatekeeperNetwork.toBuffer(),\r\n\t\t],\r\n\t\tCIVIC,\r\n\t);\r\n};\r\n\r\nfunction createAssociatedTokenAccountInstruction(\r\n\tassociatedTokenAddress,\r\n\tpayer,\r\n\twalletAddress,\r\n\tsplTokenMintAddress,\r\n) {\r\n\tconst keys = [\r\n\t\t{\r\n\t\t\tpubkey: payer,\r\n\t\t\tisSigner: true,\r\n\t\t\tisWritable: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpubkey: associatedTokenAddress,\r\n\t\t\tisSigner: false,\r\n\t\t\tisWritable: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpubkey: walletAddress,\r\n\t\t\tisSigner: false,\r\n\t\t\tisWritable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpubkey: splTokenMintAddress,\r\n\t\t\tisSigner: false,\r\n\t\t\tisWritable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpubkey: SystemProgram.programId,\r\n\t\t\tisSigner: false,\r\n\t\t\tisWritable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpubkey: TOKEN_PROGRAM_ID,\r\n\t\t\tisSigner: false,\r\n\t\t\tisWritable: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpubkey: SYSVAR_RENT_PUBKEY,\r\n\t\t\tisSigner: false,\r\n\t\t\tisWritable: false,\r\n\t\t},\r\n\t];\r\n\treturn new TransactionInstruction({\r\n\t\tkeys,\r\n\t\tprogramId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n\t\tdata: Buffer.from([]),\r\n\t});\r\n}\r\n\r\nconst shortenAddress = (address, chars = 4) => {\r\n\treturn `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nexport {\r\n\tcandyMachineProgram,\r\n\tTOKEN_METADATA_PROGRAM_ID,\r\n\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n\tCIVIC,\r\n\tshortenAddress,\r\n\ttoDate,\r\n\tformatNumber,\r\n\tgetAtaForMint,\r\n\tgetNetworkExpire,\r\n\tgetNetworkToken,\r\n\tcreateAssociatedTokenAccountInstruction,\r\n};","import { Transaction } from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\nexport const getErrorForTransaction = async (\r\n\tconnection,\r\n\ttxid\r\n) => {\r\n\t// wait for all confirmation before geting transaction\r\n\tawait connection.confirmTransaction(txid, 'max');\r\n\r\n\tconst tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n\tconst errors = [];\r\n\tif (tx?.meta && tx.meta.logMessages) {\r\n\t\ttx.meta.logMessages.forEach(log => {\r\n\t\t\tconst regex = /Error: (.*)/gm;\r\n\t\t\tlet m;\r\n\t\t\twhile ((m = regex.exec(log)) !== null) {\r\n\t\t\t\t// This is necessary to avoid infinite loops with zero-width matches\r\n\t\t\t\tif (m.index === regex.lastIndex) {\r\n\t\t\t\t\tregex.lastIndex++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (m.length > 1) {\r\n\t\t\t\t\terrors.push(m[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn errors;\r\n};\r\n\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n\tconnection,\r\n\twallet,\r\n\tinstructions,\r\n\tsigners,\r\n) {\r\n\tlet stopPoint = 0;\r\n\tlet tries = 0;\r\n\tlet lastInstructionsLength = null;\r\n\tlet toRemoveSigners = {};\r\n\tinstructions = instructions.filter((instr, i) => {\r\n\t\tif (instr.length > 0) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\ttoRemoveSigners[i] = true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t});\r\n\tlet ids = [];\r\n\tlet filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n\twhile (stopPoint < instructions.length && tries < 3) {\r\n\t\tinstructions = instructions.slice(stopPoint, instructions.length);\r\n\t\tfilteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n\t\tif (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n\t\telse tries = 0;\r\n\r\n\t\ttry {\r\n\t\t\tif (instructions.length === 1) {\r\n\t\t\t\tconst id = await sendTransactionWithRetry(\r\n\t\t\t\t\tconnection,\r\n\t\t\t\t\twallet,\r\n\t\t\t\t\tinstructions[0],\r\n\t\t\t\t\tfilteredSigners[0],\r\n\t\t\t\t\t'single',\r\n\t\t\t\t);\r\n\t\t\t\tids.push(id.txid);\r\n\t\t\t\tstopPoint = 1;\r\n\t\t\t} else {\r\n\t\t\t\tconst { txs } = await sendTransactions(\r\n\t\t\t\t\tconnection,\r\n\t\t\t\t\twallet,\r\n\t\t\t\t\tinstructions,\r\n\t\t\t\t\tfilteredSigners,\r\n\t\t\t\t\t'StopOnFailure',\r\n\t\t\t\t\t'single',\r\n\t\t\t\t);\r\n\t\t\t\tids = ids.concat(txs.map(t => t.txid));\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t\tconsole.log(\r\n\t\t\t'Died on ',\r\n\t\t\tstopPoint,\r\n\t\t\t'retrying from instruction',\r\n\t\t\tinstructions[stopPoint],\r\n\t\t\t'instructions length is',\r\n\t\t\tinstructions.length,\r\n\t\t);\r\n\t\tlastInstructionsLength = instructions.length;\r\n\t}\r\n\r\n\treturn ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n\tconnection,\r\n\twallet,\r\n\tinstructionSet,\r\n\tsignersSet,\r\n\tsequenceType = 'Parallel',\r\n\tcommitment = 'singleGossip',\r\n\tsuccessCallback = (txid, ind) => { },\r\n\tfailCallback = (txid, ind) => false,\r\n\tblock,\r\n) => {\r\n\tif (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n\tconst unsignedTxns = [];\r\n\r\n\tif (!block) {\r\n\t\tblock = await connection.getRecentBlockhash(commitment);\r\n\t}\r\n\r\n\tfor (let i = 0; i < instructionSet.length; i++) {\r\n\t\tconst instructions = instructionSet[i];\r\n\t\tconst signers = signersSet[i];\r\n\r\n\t\tif (instructions.length === 0) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tlet transaction = new Transaction();\r\n\t\tinstructions.forEach(instruction => transaction.add(instruction));\r\n\t\ttransaction.recentBlockhash = block.blockhash;\r\n\t\ttransaction.setSigners(\r\n\t\t\t// fee payed by the wallet owner\r\n\t\t\twallet.publicKey,\r\n\t\t\t...signers.map(s => s.publicKey),\r\n\t\t);\r\n\r\n\t\tif (signers.length > 0) {\r\n\t\t\ttransaction.partialSign(...signers);\r\n\t\t}\r\n\r\n\t\tunsignedTxns.push(transaction);\r\n\t}\r\n\r\n\tconst signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n\r\n\tconst pendingTxns = [];\r\n\r\n\tlet breakEarlyObject = { breakEarly: false, i: 0 };\r\n\tconsole.log(\r\n\t\t'Signed txns length',\r\n\t\tsignedTxns.length,\r\n\t\t'vs handed in length',\r\n\t\tinstructionSet.length,\r\n\t);\r\n\tfor (let i = 0; i < signedTxns.length; i++) {\r\n\t\tconst signedTxnPromise = sendSignedTransaction({\r\n\t\t\tconnection,\r\n\t\t\tsignedTransaction: signedTxns[i],\r\n\t\t});\r\n\r\n\t\tsignedTxnPromise\r\n\t\t\t.then(({ txid, slot }) => {\r\n\t\t\t\tsuccessCallback(txid, i);\r\n\t\t\t})\r\n\t\t\t.catch(reason => {\r\n\t\t\t\tfailCallback(signedTxns[i], i);\r\n\t\t\t\tif (sequenceType === 'StopOnFailure') {\r\n\t\t\t\t\tbreakEarlyObject.breakEarly = true;\r\n\t\t\t\t\tbreakEarlyObject.i = i;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tif (sequenceType !== 'Parallel') {\r\n\t\t\ttry {\r\n\t\t\t\tawait signedTxnPromise;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log('Caught failure', e);\r\n\t\t\t\tif (breakEarlyObject.breakEarly) {\r\n\t\t\t\t\tconsole.log('Died on ', breakEarlyObject.i);\r\n\t\t\t\t\t// Return the txn we failed on by index\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tnumber: breakEarlyObject.i,\r\n\t\t\t\t\t\ttxs: await Promise.all(pendingTxns),\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tpendingTxns.push(signedTxnPromise);\r\n\t\t}\r\n\t}\r\n\r\n\tif (sequenceType !== 'Parallel') {\r\n\t\tawait Promise.all(pendingTxns);\r\n\t}\r\n\r\n\treturn { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n\tconnection,\r\n\twallet,\r\n\tinstructions,\r\n\tsigners,\r\n\tawaitConfirmation = true,\r\n\tcommitment = 'singleGossip',\r\n\tincludesFeePayer = false,\r\n\tblock,\r\n) => {\r\n\tif (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n\tlet transaction = new Transaction();\r\n\tinstructions.forEach(instruction => transaction.add(instruction));\r\n\ttransaction.recentBlockhash = (\r\n\t\tblock || (await connection.getRecentBlockhash(commitment))\r\n\t).blockhash;\r\n\r\n\tif (includesFeePayer) {\r\n\t\ttransaction.setSigners(...signers.map(s => s.publicKey));\r\n\t} else {\r\n\t\ttransaction.setSigners(\r\n\t\t\t// fee payed by the wallet owner\r\n\t\t\twallet.publicKey,\r\n\t\t\t...signers.map(s => s.publicKey),\r\n\t\t);\r\n\t}\r\n\r\n\tif (signers.length > 0) {\r\n\t\ttransaction.partialSign(...signers);\r\n\t}\r\n\tif (!includesFeePayer) {\r\n\t\ttransaction = await wallet.signTransaction(transaction);\r\n\t}\r\n\r\n\tconst rawTransaction = transaction.serialize();\r\n\tlet options = {\r\n\t\tskipPreflight: true,\r\n\t\tcommitment,\r\n\t};\r\n\r\n\tconst txid = await connection.sendRawTransaction(rawTransaction, options);\r\n\tlet slot = 0;\r\n\r\n\tif (awaitConfirmation) {\r\n\t\tconst confirmation = await awaitTransactionSignatureConfirmation(\r\n\t\t\ttxid,\r\n\t\t\tDEFAULT_TIMEOUT,\r\n\t\t\tconnection,\r\n\t\t\tcommitment,\r\n\t\t);\r\n\r\n\t\tif (!confirmation)\r\n\t\t\tthrow new Error('Timed out awaiting confirmation on transaction');\r\n\t\tslot = confirmation?.slot || 0;\r\n\r\n\t\tif (confirmation?.err) {\r\n\t\t\tconst errors = await getErrorForTransaction(connection, txid);\r\n\r\n\t\t\tconsole.log(errors);\r\n\t\t\tthrow new Error(`Raw transaction ${txid} failed`);\r\n\t\t}\r\n\t}\r\n\r\n\treturn { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n\tconnection,\r\n\twallet,\r\n\tinstructions,\r\n\tsigners,\r\n\tcommitment = 'singleGossip',\r\n\tincludesFeePayer = false,\r\n\tblock,\r\n\tbeforeSend,\r\n) => {\r\n\tif (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n\tlet transaction = new Transaction();\r\n\tinstructions.forEach(instruction => transaction.add(instruction));\r\n\ttransaction.recentBlockhash = (\r\n\t\tblock || (await connection.getRecentBlockhash(commitment))\r\n\t).blockhash;\r\n\r\n\tif (includesFeePayer) {\r\n\t\ttransaction.setSigners(...signers.map(s => s.publicKey));\r\n\t} else {\r\n\t\ttransaction.setSigners(\r\n\t\t\t// fee payed by the wallet owner\r\n\t\t\twallet.publicKey,\r\n\t\t\t...signers.map(s => s.publicKey),\r\n\t\t);\r\n\t}\r\n\r\n\tif (signers.length > 0) {\r\n\t\ttransaction.partialSign(...signers);\r\n\t}\r\n\tif (!includesFeePayer) {\r\n\t\ttransaction = await wallet.signTransaction(transaction);\r\n\t}\r\n\r\n\tif (beforeSend) {\r\n\t\tbeforeSend();\r\n\t}\r\n\r\n\tconst { txid, slot } = await sendSignedTransaction({\r\n\t\tconnection,\r\n\t\tsignedTransaction: transaction,\r\n\t});\r\n\r\n\treturn { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n\treturn new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 15000;\r\n\r\nexport async function sendSignedTransaction({\r\n\tsignedTransaction,\r\n\tconnection,\r\n\ttimeout = DEFAULT_TIMEOUT,\r\n}) {\r\n\tconst rawTransaction = signedTransaction.serialize();\r\n\tconst startTime = getUnixTs();\r\n\tlet slot = 0;\r\n\tconst txid = await connection.sendRawTransaction(\r\n\t\trawTransaction,\r\n\t\t{\r\n\t\t\tskipPreflight: true,\r\n\t\t},\r\n\t);\r\n\r\n\tconsole.log('Started awaiting confirmation for', txid);\r\n\r\n\tlet done = false;\r\n\t(async () => {\r\n\t\twhile (!done && getUnixTs() - startTime < timeout) {\r\n\t\t\tconnection.sendRawTransaction(rawTransaction, {\r\n\t\t\t\tskipPreflight: true,\r\n\t\t\t});\r\n\t\t\tawait sleep(500);\r\n\t\t}\r\n\t})();\r\n\ttry {\r\n\t\tconst confirmation = await awaitTransactionSignatureConfirmation(\r\n\t\t\ttxid,\r\n\t\t\ttimeout,\r\n\t\t\tconnection,\r\n\t\t\t'recent',\r\n\t\t\ttrue,\r\n\t\t);\r\n\r\n\t\tif (!confirmation)\r\n\t\t\tthrow new Error('Timed out awaiting confirmation on transaction');\r\n\r\n\t\tif (confirmation.err) {\r\n\t\t\tconsole.error(confirmation.err);\r\n\t\t\tthrow new Error('Transaction failed: Custom instruction error');\r\n\t\t}\r\n\r\n\t\tslot = confirmation?.slot || 0;\r\n\t} catch (err) {\r\n\t\tconsole.error('Timeout Error caught', err);\r\n\t\tif (err.timeout) {\r\n\t\t\tthrow new Error('Timed out awaiting confirmation on transaction');\r\n\t\t}\r\n\t\tlet simulateResult = null;\r\n\t\ttry {\r\n\t\t\tsimulateResult = (\r\n\t\t\t\tawait simulateTransaction(connection, signedTransaction, 'single')\r\n\t\t\t).value;\r\n\t\t} catch (e) { }\r\n\t\tif (simulateResult && simulateResult.err) {\r\n\t\t\tif (simulateResult.logs) {\r\n\t\t\t\tfor (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n\t\t\t\t\tconst line = simulateResult.logs[i];\r\n\t\t\t\t\tif (line.startsWith('Program log: ')) {\r\n\t\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t\t'Transaction failed: ' + line.slice('Program log: '.length),\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(JSON.stringify(simulateResult.err));\r\n\t\t}\r\n\t\t// throw new Error('Transaction failed');\r\n\t} finally {\r\n\t\tdone = true;\r\n\t}\r\n\r\n\tconsole.log('Latency', txid, getUnixTs() - startTime);\r\n\treturn { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n\tconnection,\r\n\ttransaction,\r\n\tcommitment,\r\n) {\r\n\t// @ts-ignore\r\n\ttransaction.recentBlockhash = await connection._recentBlockhash(\r\n\t\t// @ts-ignore\r\n\t\tconnection._disableBlockhashCaching,\r\n\t);\r\n\r\n\tconst signData = transaction.serializeMessage();\r\n\t// @ts-ignore\r\n\tconst wireTransaction = transaction._serialize(signData);\r\n\tconst encodedTransaction = wireTransaction.toString('base64');\r\n\tconst config = { encoding: 'base64', commitment };\r\n\tconst args = [encodedTransaction, config];\r\n\r\n\t// @ts-ignore\r\n\tconst res = await connection._rpcRequest('simulateTransaction', args);\r\n\tif (res.error) {\r\n\t\tthrow new Error('failed to simulate transaction: ' + res.error.message);\r\n\t}\r\n\treturn res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n\ttxid,\r\n\ttimeout,\r\n\tconnection,\r\n\tcommitment = 'recent',\r\n\tqueryStatus = false,\r\n) {\r\n\tlet done = false;\r\n\tlet status = {\r\n\t\tslot: 0,\r\n\t\tconfirmations: 0,\r\n\t\terr: null,\r\n\t};\r\n\tlet subId = 0;\r\n\tstatus = await new Promise(async (resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tif (done) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdone = true;\r\n\t\t\tconsole.log('Rejecting for timeout...');\r\n\t\t\treject({ timeout: true });\r\n\t\t}, timeout);\r\n\t\ttry {\r\n\t\t\tsubId = connection.onSignature(\r\n\t\t\t\ttxid,\r\n\t\t\t\t(result, context) => {\r\n\t\t\t\t\tdone = true;\r\n\t\t\t\t\tstatus = {\r\n\t\t\t\t\t\terr: result.err,\r\n\t\t\t\t\t\tslot: context.slot,\r\n\t\t\t\t\t\tconfirmations: 0,\r\n\t\t\t\t\t};\r\n\t\t\t\t\tif (result.err) {\r\n\t\t\t\t\t\tconsole.log('Rejected via websocket', result.err);\r\n\t\t\t\t\t\treject(status);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log('Resolved via websocket', result);\r\n\t\t\t\t\t\tresolve(status);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tcommitment,\r\n\t\t\t);\r\n\t\t} catch (e) {\r\n\t\t\tdone = true;\r\n\t\t\tconsole.error('WS error in setup', txid, e);\r\n\t\t}\r\n\t\twhile (!done && queryStatus) {\r\n\t\t\t// eslint-disable-next-line no-loop-func\r\n\t\t\t(async () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst signatureStatuses = await connection.getSignatureStatuses([\r\n\t\t\t\t\t\ttxid,\r\n\t\t\t\t\t]);\r\n\t\t\t\t\tstatus = signatureStatuses && signatureStatuses.value[0];\r\n\t\t\t\t\tif (!done) {\r\n\t\t\t\t\t\tif (!status) {\r\n\t\t\t\t\t\t\tconsole.log('REST null result for', txid, status);\r\n\t\t\t\t\t\t} else if (status.err) {\r\n\t\t\t\t\t\t\tconsole.log('REST error for', txid, status);\r\n\t\t\t\t\t\t\tdone = true;\r\n\t\t\t\t\t\t\treject(status.err);\r\n\t\t\t\t\t\t} else if (!status.confirmations) {\r\n\t\t\t\t\t\t\tconsole.log('REST no confirmations for', txid, status);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log('REST confirmation for', txid, status);\r\n\t\t\t\t\t\t\tdone = true;\r\n\t\t\t\t\t\t\tresolve(status);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tif (!done) {\r\n\t\t\t\t\t\tconsole.log('REST connection error: txid', txid, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})();\r\n\t\t\tawait sleep(2000);\r\n\t\t}\r\n\t});\r\n\r\n\t//@ts-ignore\r\n\tif (connection._signatureSubscriptions[subId])\r\n\t\tconnection.removeSignatureListener(subId);\r\n\tdone = true;\r\n\tconsole.log('Returning status', status);\r\n\treturn status;\r\n}\r\nexport function sleep(ms) {\r\n\treturn new Promise(resolve => setTimeout(resolve, ms));\r\n}","import { createContext, useContext, useState } from \"react\";\r\n\r\nconst context = createContext(null);\r\n\r\nexport const useCandyMachine = () => useContext(context);\r\n\r\nconst CandyMachineProvider = ({ children }) => {\r\n    const [candyMachine, setCandyMachine] = useState(null);\r\n    const [walletAddress, setWalletAddress] = useState(null);\r\n\r\n    return (\r\n        <context.Provider value={{\r\n            candyMachine,\r\n            walletAddress,\r\n            setCandyMachine,\r\n            setWalletAddress\r\n        }}>\r\n            {children}\r\n        </context.Provider>\r\n    )\r\n}\r\n\r\nexport default CandyMachineProvider;","import React, { useEffect, useState } from 'react';\r\nimport { Token } from '@solana/spl-token';\r\nimport { MintLayout, TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport ReactLoading from \"react-loading\";\r\nimport { sendTransactions } from './connection';\r\nimport './CandyMachine.css';\r\nimport { Buffer } from 'buffer';\r\nimport {\r\n\tcandyMachineProgram,\r\n\tTOKEN_METADATA_PROGRAM_ID,\r\n\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n\tgetAtaForMint,\r\n\tgetNetworkExpire,\r\n\tgetNetworkToken,\r\n\tCIVIC\r\n} from './helpers';\r\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\r\nimport { useCandyMachine } from '../../CandyMachineContext';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\n\r\n//To get all the require methods/classes for connecting to the solana blockchian \r\n\r\nconst opts = { preflightCommitment: 'processed' };\r\n\r\nconst CandyMachine = ({ walletAddress }) => {\r\n\tconst recaptchaRef = React.createRef();\r\n\tconst {candyMachine, setCandyMachine} = useCandyMachine();\r\n\tconst [count, setCount] = useState(1);\r\n\tconst [isLoading, setLoading] = useState(false);\r\n\r\n\tconst changeCount = (e) => setCount(e.target.value);\r\n\tconst clickMint = async (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst token = recaptchaRef.current.getValue();\r\n\t\tif(!token) return window.alert('Please verify you\\'re not a robot');\r\n\t\tmintToken(count)\r\n\t\t.then(() => setLoading(false))\r\n\t\t.catch(err => {\r\n\t\t\tsetLoading(false);\r\n\t\t\talert(err.message);\r\n\t\t});\r\n\t\tsetLoading(true);\r\n\t}\r\n\r\n\tconst getProvider = () => {\r\n\t\tconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\r\n\t\tconst connection = new web3.Connection(rpcHost);\r\n\r\n\t\t//create a new SOlana proivder object\r\n\t\tconst provider = new Provider(\r\n\t\t\tconnection,\r\n\t\t\twindow.solana,\r\n\t\t\topts\r\n\t\t);\r\n\t\treturn provider;\r\n\t};\r\n\r\n\tconst getCandyMachineState = async () => {\r\n\t\tconst provider = getProvider();\r\n\r\n\t\t//Get metadata about your deployed candy machine \r\n\t\tconst idl = await Program.fetchIdl(candyMachineProgram, provider);\r\n\r\n\t\t// Create a program that you can call\r\n\t\tconst program = new Program(idl, candyMachineProgram, provider);\r\n\r\n\t\t// Fetch the metadata from your candy machine\r\n\t\tconst candyMachine = await program.account.candyMachine.fetch(process.env.REACT_APP_CANDY_MACHINE_ID);\r\n\r\n\t\t// Parse out all our metadata and log it out\r\n\t\tconst price = candyMachine.data.price.toNumber() / LAMPORTS_PER_SOL;\r\n\t\tconst itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\r\n\t\tconst itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\r\n\t\tconst itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\t\tconst goLiveData = candyMachine.data.goLiveDate.toNumber();\r\n\t\tconst presale =\r\n\t\t\tcandyMachine.data.whitelistMintSettings &&\r\n\t\t\tcandyMachine.data.whitelistMintSettings.presale &&\r\n\t\t\t(!candyMachine.data.goLiveDate || candyMachine.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\r\n\r\n\t\t// We will be using this later in our UI so let's generate this now\r\n\t\tconst goLiveDateTimeString = new Date(goLiveData * 1000).toGMTString();\r\n\r\n\t\tsetCandyMachine({\r\n\t\t\tid: process.env.REACT_APP_CANDY_MACHINE_ID,\r\n\t\t\tprogram,\r\n\t\t\tstate: {\r\n\t\t\t\tprice,\r\n\t\t\t\titemsAvailable,\r\n\t\t\t\titemsRedeemed,\r\n\t\t\t\titemsRemaining,\r\n\t\t\t\tgoLiveData,\r\n\t\t\t\tgoLiveDateTimeString,\r\n\t\t\t\tisSoldOut: itemsRemaining === 0,\r\n\t\t\t\tisActive:\r\n\t\t\t\t\t(presale ||\r\n\t\t\t\t\t\tcandyMachine.data.goLiveDate.toNumber() < new Date().getTime() / 1000) &&\r\n\t\t\t\t\t(candyMachine.endSettings\r\n\t\t\t\t\t\t? candyMachine.endSettings.endSettingType.date\r\n\t\t\t\t\t\t\t? candyMachine.endSettings.number.toNumber() > new Date().getTime() / 1000\r\n\t\t\t\t\t\t\t: itemsRedeemed < candyMachine.endSettings.number.toNumber()\r\n\t\t\t\t\t\t: true),\r\n\t\t\t\tisPresale: presale,\r\n\t\t\t\tgoLiveDate: candyMachine.data.goLiveDate,\r\n\t\t\t\ttreasury: candyMachine.wallet,\r\n\t\t\t\ttokenMint: candyMachine.tokenMint,\r\n\t\t\t\tgatekeeper: candyMachine.data.gatekeeper,\r\n\t\t\t\tendSettings: candyMachine.data.endSettings,\r\n\t\t\t\twhitelistMintSettings: candyMachine.data.whitelistMintSettings,\r\n\t\t\t\thiddenSettings: candyMachine.data.hiddenSettings\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tconst getCandyMachineCreator = async (candyMachine) => {\r\n\t\tconst candyMachineID = new web3.PublicKey(candyMachine);\r\n\t\treturn await web3.PublicKey.findProgramAddress(\r\n\t\t\t[Buffer.from('candy_machine'), candyMachineID.toBuffer()],\r\n\t\t\tcandyMachineProgram,\r\n\t\t);\r\n\t};\r\n\r\n\tconst getMetadata = async (mint) => {\r\n\t\treturn (\r\n\t\t\tawait web3.PublicKey.findProgramAddress(\r\n\t\t\t\t[\r\n\t\t\t\t\tBuffer.from('metadata'),\r\n\t\t\t\t\tTOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n\t\t\t\t\tmint.toBuffer(),\r\n\t\t\t\t],\r\n\t\t\t\tTOKEN_METADATA_PROGRAM_ID\r\n\t\t\t)\r\n\t\t)[0];\r\n\t};\r\n\r\n\tconst getMasterEdition = async (mint) => {\r\n\t\treturn (\r\n\t\t\tawait web3.PublicKey.findProgramAddress(\r\n\t\t\t\t[\r\n\t\t\t\t\tBuffer.from('metadata'),\r\n\t\t\t\t\tTOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n\t\t\t\t\tmint.toBuffer(),\r\n\t\t\t\t\tBuffer.from('edition'),\r\n\t\t\t\t],\r\n\t\t\t\tTOKEN_METADATA_PROGRAM_ID\r\n\t\t\t)\r\n\t\t)[0];\r\n\t};\r\n\r\n\tconst createAssociatedTokenAccountInstruction = (\r\n\t\tassociatedTokenAddress,\r\n\t\tpayer,\r\n\t\twalletAddress,\r\n\t\tsplTokenMintAddress\r\n\t) => {\r\n\t\tconst keys = [\r\n\t\t\t{ pubkey: payer, isSigner: true, isWritable: true },\r\n\t\t\t{ pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n\t\t\t{ pubkey: walletAddress, isSigner: false, isWritable: false },\r\n\t\t\t{ pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n\t\t\t{\r\n\t\t\t\tpubkey: web3.SystemProgram.programId,\r\n\t\t\t\tisSigner: false,\r\n\t\t\t\tisWritable: false,\r\n\t\t\t},\r\n\t\t\t{ pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\t\t\t{\r\n\t\t\t\tpubkey: web3.SYSVAR_RENT_PUBKEY,\r\n\t\t\t\tisSigner: false,\r\n\t\t\t\tisWritable: false,\r\n\t\t\t},\r\n\t\t];\r\n\t\treturn new web3.TransactionInstruction({\r\n\t\t\tkeys,\r\n\t\t\tprogramId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n\t\t\tdata: Buffer.from([]),\r\n\t\t});\r\n\t};\r\n\r\n\tconst mintToken = async (c) => {\r\n\t\tconst signersMatrix = [];\r\n\t\tconst instructionsMatrix = [];\r\n\r\n\t\tfor (let index = 0; index < c; index++) {\r\n\t\t\tconst mint = web3.Keypair.generate();\r\n\r\n\t\t\tconst userTokenAccountAddress = (\r\n\t\t\t\tawait getAtaForMint(mint.publicKey, walletAddress.publicKey)\r\n\t\t\t)[0];\r\n\r\n\t\t\tconst userPayingAccountAddress = candyMachine.state.tokenMint\r\n\t\t\t\t? (await getAtaForMint(candyMachine.state.tokenMint, walletAddress.publicKey))[0]\r\n\t\t\t\t: walletAddress.publicKey;\r\n\r\n\t\t\tconst candyMachineAddress = candyMachine.id;\r\n\t\t\tconst remainingAccounts = [];\r\n\t\t\tconst signers = [mint];\r\n\t\t\tconst cleanupInstructions = [];\r\n\t\t\tconst instructions = [\r\n\t\t\t\tweb3.SystemProgram.createAccount({\r\n\t\t\t\t\tfromPubkey: walletAddress.publicKey,\r\n\t\t\t\t\tnewAccountPubkey: mint.publicKey,\r\n\t\t\t\t\tspace: MintLayout.span,\r\n\t\t\t\t\tlamports:\r\n\t\t\t\t\t\tawait candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n\t\t\t\t\t\t\tMintLayout.span,\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\tprogramId: TOKEN_PROGRAM_ID,\r\n\t\t\t\t}),\r\n\t\t\t\tToken.createInitMintInstruction(\r\n\t\t\t\t\tTOKEN_PROGRAM_ID,\r\n\t\t\t\t\tmint.publicKey,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t),\r\n\t\t\t\tcreateAssociatedTokenAccountInstruction(\r\n\t\t\t\t\tuserTokenAccountAddress,\r\n\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t\tmint.publicKey,\r\n\t\t\t\t),\r\n\t\t\t\tToken.createMintToInstruction(\r\n\t\t\t\t\tTOKEN_PROGRAM_ID,\r\n\t\t\t\t\tmint.publicKey,\r\n\t\t\t\t\tuserTokenAccountAddress,\r\n\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t\t[],\r\n\t\t\t\t\t1,\r\n\t\t\t\t),\r\n\t\t\t];\r\n\r\n\t\t\tif (candyMachine.state.gatekeeper) {\r\n\t\t\t\tremainingAccounts.push({\r\n\t\t\t\t\tpubkey: (\r\n\t\t\t\t\t\tawait getNetworkToken(\r\n\t\t\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t\t\t\tcandyMachine.state.gatekeeper.gatekeeperNetwork,\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)[0],\r\n\t\t\t\t\tisWritable: true,\r\n\t\t\t\t\tisSigner: false,\r\n\t\t\t\t});\r\n\t\t\t\tif (candyMachine.state.gatekeeper.expireOnUse) {\r\n\t\t\t\t\tremainingAccounts.push({\r\n\t\t\t\t\t\tpubkey: CIVIC,\r\n\t\t\t\t\t\tisWritable: false,\r\n\t\t\t\t\t\tisSigner: false,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tremainingAccounts.push({\r\n\t\t\t\t\t\tpubkey: (\r\n\t\t\t\t\t\t\tawait getNetworkExpire(\r\n\t\t\t\t\t\t\t\tcandyMachine.state.gatekeeper.gatekeeperNetwork,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)[0],\r\n\t\t\t\t\t\tisWritable: false,\r\n\t\t\t\t\t\tisSigner: false,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (candyMachine.state.whitelistMintSettings) {\r\n\t\t\t\tconst mint = new web3.PublicKey(\r\n\t\t\t\t\tcandyMachine.state.whitelistMintSettings.mint,\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst whitelistToken = (await getAtaForMint(mint, walletAddress.publicKey))[0];\r\n\t\t\t\tremainingAccounts.push({\r\n\t\t\t\t\tpubkey: whitelistToken,\r\n\t\t\t\t\tisWritable: true,\r\n\t\t\t\t\tisSigner: false,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n\t\t\t\t\tconst whitelistBurnAuthority = web3.Keypair.generate();\r\n\r\n\t\t\t\t\tremainingAccounts.push({\r\n\t\t\t\t\t\tpubkey: mint,\r\n\t\t\t\t\t\tisWritable: true,\r\n\t\t\t\t\t\tisSigner: false,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tremainingAccounts.push({\r\n\t\t\t\t\t\tpubkey: whitelistBurnAuthority.publicKey,\r\n\t\t\t\t\t\tisWritable: false,\r\n\t\t\t\t\t\tisSigner: true,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsigners.push(whitelistBurnAuthority);\r\n\t\t\t\t\tconst exists =\r\n\t\t\t\t\t\tawait candyMachine.program.provider.connection.getAccountInfo(\r\n\t\t\t\t\t\t\twhitelistToken,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tif (exists) {\r\n\t\t\t\t\t\tinstructions.push(\r\n\t\t\t\t\t\t\tToken.createApproveInstruction(\r\n\t\t\t\t\t\t\t\tTOKEN_PROGRAM_ID,\r\n\t\t\t\t\t\t\t\twhitelistToken,\r\n\t\t\t\t\t\t\t\twhitelistBurnAuthority.publicKey,\r\n\t\t\t\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t\t\t\t\t[],\r\n\t\t\t\t\t\t\t\t1,\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tcleanupInstructions.push(\r\n\t\t\t\t\t\t\tToken.createRevokeInstruction(\r\n\t\t\t\t\t\t\t\tTOKEN_PROGRAM_ID,\r\n\t\t\t\t\t\t\t\twhitelistToken,\r\n\t\t\t\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t\t\t\t\t[],\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (candyMachine.state.tokenMint) {\r\n\t\t\t\tconst transferAuthority = web3.Keypair.generate();\r\n\r\n\t\t\t\tsigners.push(transferAuthority);\r\n\t\t\t\tremainingAccounts.push({\r\n\t\t\t\t\tpubkey: userPayingAccountAddress,\r\n\t\t\t\t\tisWritable: true,\r\n\t\t\t\t\tisSigner: false,\r\n\t\t\t\t});\r\n\t\t\t\tremainingAccounts.push({\r\n\t\t\t\t\tpubkey: transferAuthority.publicKey,\r\n\t\t\t\t\tisWritable: false,\r\n\t\t\t\t\tisSigner: true,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tinstructions.push(\r\n\t\t\t\t\tToken.createApproveInstruction(\r\n\t\t\t\t\t\tTOKEN_PROGRAM_ID,\r\n\t\t\t\t\t\tuserPayingAccountAddress,\r\n\t\t\t\t\t\ttransferAuthority.publicKey,\r\n\t\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t\t\t[],\r\n\t\t\t\t\t\tcandyMachine.state.price.toNumber(),\r\n\t\t\t\t\t),\r\n\t\t\t\t);\r\n\t\t\t\tcleanupInstructions.push(\r\n\t\t\t\t\tToken.createRevokeInstruction(\r\n\t\t\t\t\t\tTOKEN_PROGRAM_ID,\r\n\t\t\t\t\t\tuserPayingAccountAddress,\r\n\t\t\t\t\t\twalletAddress.publicKey,\r\n\t\t\t\t\t\t[],\r\n\t\t\t\t\t),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tconst metadataAddress = await getMetadata(mint.publicKey);\r\n\t\t\tconst masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n\t\t\tconst [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n\t\t\t\tcandyMachineAddress,\r\n\t\t\t);\r\n\r\n\t\t\tinstructions.push(\r\n\t\t\t\tawait candyMachine.program.instruction.mintNft(creatorBump, {\r\n\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\tcandyMachine: candyMachineAddress,\r\n\t\t\t\t\t\tcandyMachineCreator,\r\n\t\t\t\t\t\tpayer: walletAddress.publicKey,\r\n\t\t\t\t\t\twallet: candyMachine.state.treasury,\r\n\t\t\t\t\t\tmint: mint.publicKey,\r\n\t\t\t\t\t\tmetadata: metadataAddress,\r\n\t\t\t\t\t\tmasterEdition,\r\n\t\t\t\t\t\tmintAuthority: walletAddress.publicKey,\r\n\t\t\t\t\t\tupdateAuthority: walletAddress.publicKey,\r\n\t\t\t\t\t\ttokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n\t\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\r\n\t\t\t\t\t\tsystemProgram: web3.SystemProgram.programId,\r\n\t\t\t\t\t\trent: web3.SYSVAR_RENT_PUBKEY,\r\n\t\t\t\t\t\tclock: web3.SYSVAR_CLOCK_PUBKEY,\r\n\t\t\t\t\t\trecentBlockhashes: web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n\t\t\t\t\t\tinstructionSysvarAccount: web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tremainingAccounts:\r\n\t\t\t\t\t\tremainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n\t\t\t\t}),\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tsignersMatrix.push(signers);\r\n\t\t\tsignersMatrix.push([]);\r\n\t\t\tinstructionsMatrix.push(instructions);\r\n\t\t\tinstructionsMatrix.push(cleanupInstructions);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\treturn (\r\n\t\t\t\tawait sendTransactions(\r\n\t\t\t\t\tcandyMachine.program.provider.connection,\r\n\t\t\t\t\tcandyMachine.program.provider.wallet,\r\n\t\t\t\t\tinstructionsMatrix,\r\n\t\t\t\t\tsignersMatrix,\r\n\t\t\t\t)\r\n\t\t\t).txs.map(t => t.txid);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t\treturn [];\r\n\t};\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tgetCandyMachineState();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t//Only how this if machineStats is available \r\n\t\tcandyMachine ?\r\n\t\t\t<form onSubmit={clickMint} className=\"w-full flex flex-col gap-3\">\r\n\t\t\t\t<ReCAPTCHA ref={recaptchaRef} sitekey={process.env.REACT_APP_RECAPTCHA_SITE_KEY} />\r\n\t\t\t\t<div className='flex gap-3 justify-between items-center'>\r\n\t\t\t\t\t<div>Amount:</div>\r\n\t\t\t\t\t<input type=\"number\" className='rounded-md outline-none text-black px-2 w-20' value={count} onChange={changeCount} required />\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// candyMachine.state.itemsRedeemed === candyMachine.state.itemsAvailable ? \r\n\t\t\t\t\t\t// <div className=\"px-3 py-1 border-red-500 text-red-500 rounded-md border\">SOLD OUT CRITTERS!</div> : \r\n\t\t\t\t\t\t<button className='px-3 py-1 rounded-md border border-green-500 text-green-500' disabled={isLoading}>\r\n\t\t\t\t\t\t\t{ isLoading ? <ReactLoading type='bubbles' height={20} color='#0f0' className='flex items-center' /> : 'Mint NFT' }\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</form> :\r\n\t\t\t<div>Loading...</div>\r\n\t)\r\n\r\n}\r\nexport default CandyMachine;","export default __webpack_public_path__ + \"static/media/stamp.5c2d72a2.png\";","export default __webpack_public_path__ + \"static/media/hellcats.c67c1f2c.png\";","import React, { useEffect, useState } from 'react';\r\nimport CandyMachine from './CandyMachine';\r\nimport logo from '../assets/imgs/stamp.png';\r\nimport hellcat from '../assets/imgs/hellcats.png';\r\nimport { useCandyMachine } from '../CandyMachineContext';\r\nimport { shortenAddress } from './CandyMachine/helpers';\r\nimport Progressbar from 'react-js-progressbar';\r\n\r\nconst Home = () => {\r\n\tconst { walletAddress, setWalletAddress, candyMachine } = useCandyMachine();\r\n    const [percent, setPercent] = useState(0);\r\n\r\n\tconst checkIfWalletIsConnected = () => {\r\n        const { solana } = window;\r\n        if (solana?.isPhantom) {\r\n            console.log('Phantom wallet found!');\r\n            solana.connect({ onlyIfTrusted: true })\r\n            .then(response => {\r\n                setWalletAddress(response.publicKey.toString()); //Guess Thats how you obtain address in SOL\r\n                console.log('Connected with Public Key:', response.publicKey.toString());\r\n            })\r\n            .catch(console.error);\r\n        }\r\n\t};\r\n\r\n\t/*\r\n\t * Let's define this method so our code doesn't break.\r\n\t * We will write the logic for this next!\r\n\t */\r\n\tconst connectWallet = () => {\r\n\t\tconst { solana } = window;\r\n\r\n\t\tif (solana) {\r\n\t\t\tsolana.connect().then(response => {\r\n                setWalletAddress(response.publicKey.toString()); //Guess Thats how you obtain address in SOL\r\n                console.log('Connected with Public Key:', response.publicKey.toString());\r\n            })\r\n            .catch(console.error);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(checkIfWalletIsConnected, [setWalletAddress]);\r\n    useEffect(() => {\r\n        if(candyMachine) setPercent(Math.floor(candyMachine.state.itemsRedeemed / candyMachine.state.itemsAvailable * 100));\r\n    }, [candyMachine]);\r\n\r\n\treturn (\r\n\t\t<div className='App min-h-screen'>\r\n\t\t\t<div className='py-2 bg-neutral-800'>\r\n\t\t\t\t<div className='flex justify-between items-center max-w-4xl mx-auto'>\r\n\t\t\t\t\t<div className='flex gap-3 items-center'>\r\n\t\t\t\t\t\t<img src={logo} className='w-10 h-10' alt='' />\r\n\t\t\t\t\t\t<div className='text-lg font-bold'>TheSuperSOL</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{ walletAddress ?\r\n                        <div className='px-3 py-1 rounded-md border border-green-500 text-green-500'>${shortenAddress(walletAddress)}</div> :\r\n                        <button onClick={connectWallet} className='px-3 py-1 rounded-md border'>Connect Wallet</button> \r\n                    }\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n            <div className='py-10'>\r\n                <div className='max-w-4xl mx-auto rounded-xl bg-stone-800 px-20 py-12 outline outline-green-800'>\r\n                    <div className='font-bold text-5xl pb-5'>TheSuperSOL</div>\r\n                    <div className='flex gap-10'>\r\n                        <div className='flex flex-col items-start gap-5 flex-1'>\r\n                            <img src={hellcat} className='rounded-3xl' alt='' />\r\n                        </div>\r\n                        <div className='flex flex-col items-start flex-1'>\r\n                            <div className='flex items-center gap-3 w-full pb-5'>\r\n                                <div className='flex-1'>\r\n                                    <Progressbar input={percent} textStyle={{ fill: 'white' }} />\r\n                                </div>\r\n                                <div className='flex flex-col gap-2'>\r\n                                    <div className='bg-stone-700 rounded-lg px-4 py-2 flex flex-col'>\r\n                                        <div>ITEMS:</div>\r\n                                        <div className='text-3xl font-bold'>{candyMachine?.state.itemsAvailable || '---'} <span className='text-sm'>NFTs</span></div>\r\n                                    </div>\r\n                                    <div className='bg-stone-700 rounded-lg px-4 py-2 flex flex-col'>\r\n                                        <div>MINTED:</div>\r\n                                        <div className='text-3xl font-bold'>{candyMachine?.state.itemsRedeemed || '---'} <span className='text-sm'>NFTs</span></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className='text-gray-300 pb-3'>The Most Revolutionary NFT Launchpad lives on Solana.\r\nTheSuperSOL holders will get 50% of launchpad revenue</div>\r\n                            {\r\n                                walletAddress ? \r\n                                <CandyMachine walletAddress={window.solana} /> :\r\n                                <button onClick={connectWallet} className='px-3 py-1 rounded-md border'>Connect Wallet</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Home from './pages/Home';\r\nimport CandyMachineProvider from './CandyMachineContext';\r\n\r\nconst App = () => {\r\n\t\r\n\treturn (\r\n\t\t<CandyMachineProvider>\r\n\t\t\t<Home />\r\n\t\t</CandyMachineProvider>\r\n\t)\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './assets/css/index.css';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}